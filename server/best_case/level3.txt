digraph G {
    compound=true;
    rankdir=TB;

subgraph cluster_1 { label="Choose Infrastructure (Cloud or On-Prem)";        actor_1_1 [label="You"];        entity_1_1 [label="Public cloud vendors (AWS, Azure, Google Cloud)"];    entity_1_2 [label="On-premise infrastructure"];    entity_1_3 [label="AI workloads"];        actor_1_1 -> entity_1_1 [label="Evaluate and choose for deployment"];    actor_1_1 -> entity_1_2 [label="Evaluate and choose for deployment"];    actor_1_1 -> entity_1_3 [label="Evaluate suitability for specific needs"]; }
subgraph cluster_2 { label="Provision Cloud Infrastructure";        actor_2_1 [label="You"];        entity_2_1 [label="GPU-accelerated instances"];    entity_2_2 [label="Managed Kubernetes services (EKS, AKS, GKE)"];    entity_2_3 [label="IAM roles"];    entity_2_4 [label="Virtual networks"];    entity_2_5 [label="Storage classes"];    entity_2_6 [label="Terraform or Pulumi"];    entity_2_7 [label="Telemetry agents, centralized logging, secrets management integrations (e.g., AWS Secrets Manager or Azure Key Vault)"];    actor_2_1 -> entity_2_1 [label="Provisioning"];    actor_2_1 -> entity_2_2 [label="Deploying a container orchestration layer using"];    actor_2_1 -> entity_2_3 [label="Tightly scoping"];    actor_2_1 -> entity_2_4 [label="Properly segmenting"];    actor_2_1 -> entity_2_5 [label="Defining to support ephemeral and persistent data flows"];    actor_2_1 -> entity_2_6 [label="Leveraging for codifying infrastructure"];    actor_2_1 -> entity_2_7 [label="Configuring to ensure compliance with security and observability baselines"]; }
subgraph cluster_3 { label="Set Up Bare-Metal or VMs";        actor_3_1 [label="You"];        entity_3_1 [label="Physical Servers"];    entity_3_2 [label="Virtual Machines (VMs)"];    entity_3_3 [label="NVIDIA A100 GPU / H100 GPU"];    entity_3_4 [label="Container Runtime Environments (e.g., Docker, CRI-O)"];    entity_3_5 [label="Kubernetes Orchestration Tooling (e.g., kubeadm, Rancher)"];    entity_3_6 [label="Networking Components (e.g., static IP assignment, internal DNS, VLAN tagging)"];    entity_3_7 [label="High-throughput Local Storage (e.g., NVMe-based storage, LVM or RAID)"];    entity_3_8 [label="Security Measures (e.g., firewall zoning, VPN tunneling, device-level hardening)"];    actor_3_1 -> entity_3_1 [label="Provisioning"];    actor_3_1 -> entity_3_2 [label="Configuring"];    actor_3_1 -> entity_3_3 [label="Equipping"];    actor_3_1 -> entity_3_4 [label="Installing and Configuring"];    actor_3_1 -> entity_3_5 [label="Bootstrapping"];    actor_3_1 -> entity_3_6 [label="Defining Explicitly"];    actor_3_1 -> entity_3_7 [label="Setting Up"];    actor_3_1 -> entity_3_8 [label="Implementing"]; }
subgraph cluster_4 { label="Select Model Serving Platform";    actor_4_1 [label="You"];    entity_4_1 [label="NVIDIA Triton Inference Server"];  entity_4_2 [label="TensorFlow Serving"];  entity_4_3 [label="TorchServe"];  entity_4_4 [label="Model serving platform"];  entity_4_5 [label="Container"];  entity_4_6 [label="Health-check interfaces"];  entity_4_7 [label="REST or gRPC"];  entity_4_8 [label="Helm or Kustomize"];    actor_4_1 -> entity_4_1 [label="Identify"];  actor_4_1 -> entity_4_2 [label="Identify"];  actor_4_1 -> entity_4_3 [label="Identify"];  actor_4_1 -> entity_4_4 [label="Select"];  actor_4_1 -> entity_4_5 [label="Encapsulate model and preprocessing pipeline within"];  actor_4_1 -> entity_4_6 [label="Include in container encapsulation"];  actor_4_1 -> entity_4_7 [label="Define exposure methods via, depending on downstream system compatibility"];  actor_4_1 -> entity_4_8 [label="Employ to template deployments and ensure repeatability across environments"]; }
subgraph cluster_5 { label="Deploy Inference Controller";  actor_5_1 [label="You"];  entity_5_1 [label="Model-serving containers"];  entity_5_10 [label="Orchestration fabric"];  entity_5_10 [label="StatefulSets or Deployments"];  entity_5_10 [label="ConfigMaps"];  entity_5_10 [label="Kubernetes Secrets"];  entity_5_10 [label="PersistentVolumeClaims"];  entity_5_10 [label="Horizontal Pod Autoscalers (HPA) or KEDA"];  entity_5_10 [label="Node selectors, tolerations, affinity rules"];  entity_5_10 [label="GPU-enabled nodes"];  entity_5_10 [label="Readiness probes, liveness probes"];  actor_5_1 -> entity_5_1 [label="Deploy using StatefulSets or Deployments"];  actor_5_1 -> entity_5_10 [label="Use for deployment"];  actor_5_1 -> entity_5_10 [label="Choose based on session needs"];  actor_5_1 -> entity_5_10 [label="Configure using for runtime parameters"];  actor_5_1 -> entity_5_10 [label="Manage sensitive credentials"];  actor_5_1 -> entity_5_10 [label="Attach for dynamic pulling or log retention"];  actor_5_1 -> entity_5_10 [label="Use for scaling replicas"];  actor_5_1 -> entity_5_10 [label="Apply to bind to GPU nodes"];  actor_5_1 -> entity_5_10 [label="Bind workloads using node selectors and rules"];  actor_5_1 -> entity_5_10 [label="Include for high availability"]; }
subgraph cluster_6 { label="Set Up Input Channels";  actor_6_1 [label="You"];  entity_6_1 [label="HTTP endpoints"];  entity_6_2 [label="WebSocket streams"];  entity_6_3 [label="Message queue subscribers using Kafka or RabbitMQ"];  entity_6_4 [label="API gateways (e.g., Istio Gateway, Envoy Proxy)"];  actor_6_1 -> entity_6_1 [label="Enable ingress paths"];  actor_6_1 -> entity_6_2 [label="Enable ingress paths"];  actor_6_1 -> entity_6_3 [label="Enable ingress paths"];  actor_6_1 -> entity_6_4 [label="Manage routing and retries"]; }
subgraph cluster_7 { label="Set Up Output & Storage Systems";  actor_7_1 [label="You"];  entity_7_1 [label="Prediction results"];  entity_7_2 [label="Downstream systems"];  entity_7_3 [label="Structured outputs"];  entity_7_4 [label="Relational databases"];  entity_7_5 [label="Unstructured blobs/batch exports"];  entity_7_6 [label="Object stores (e.g., Amazon S3, Azure Blob)"];  entity_7_7 [label="Redis"];  entity_7_8 [label="Memcached"];  actor_7_1 -> entity_7_1 [label="Configure output pipelines to persist or forward downstream"];  actor_7_1 -> entity_7_2 [label="Forward prediction results downstream"];  actor_7_1 -> entity_7_3 [label="Direct structured outputs to relational databases (e.g., PostgreSQL)"];  actor_7_1 -> entity_7_4 [label="Use as storage for structured outputs"];  actor_7_1 -> entity_7_5 [label="Send unstructured blobs or batch exports to object stores"];  actor_7_1 -> entity_7_6 [label="Use as storage for unstructured blobs/batch exports"];  actor_7_1 -> entity_7_7 [label="Use for short-lived data storage"];  actor_7_1 -> entity_7_8 [label="Use for short-lived data storage"]; }
subgraph cluster_8 { label="Install Metrics & Addons";        actor_8_1 [label="You"];        entity_8_1 [label="Prometheus"];    entity_8_10 [label="Grafana"];    entity_8_10 [label="Fluent Bit / Fluentd"];    entity_8_10 [label="Elasticsearch"];    entity_8_10 [label="Loki"];    entity_8_10 [label="Central SIEM platform"];    entity_8_10 [label="OpenTelemetry"];    entity_8_10 [label="Dashboards (Grafana)"];    entity_8_10 [label="Alerts"];    entity_8_10 [label="Slack / PagerDuty / Opsgenie"];    actor_8_1 -> entity_8_1 [label="Configure to scrape performance and system metrics"];    actor_8_1 -> entity_8_10 [label="Use for visualizing latency and throughput"];    actor_8_1 -> entity_8_10 [label="Route logs to Elasticsearch, Loki, or a central SIEM platform"];    actor_8_1 -> entity_8_10 [label="Receive logs routed by Fluent Bit/Fluentd"];    actor_8_1 -> entity_8_10 [label="Receive logs routed by Fluent Bit/Fluentd"];    actor_8_1 -> entity_8_10 [label="Receive logs routed by Fluent Bit/Fluentd"];    actor_8_1 -> entity_8_10 [label="Instrument distributed traces and correlate service spans"];    actor_8_1 -> entity_8_10 [label="Define dashboards reflecting system health, SLOs, and capacity planning trends"];    actor_8_1 -> entity_8_10 [label="Set up alerts for anomalies, errors, and degradation"];    entity_8_10 -> entity_8_10 [label="Notify responders via communication channels"]; }
subgraph cluster_9 { label="Configure RBAC & Security";        actor_9_1 [label="You"];        entity_9_1 [label="Kubernetes"];    entity_9_2 [label="mTLS"];    entity_9_3 [label="Ingress controllers"];    entity_9_4 [label="HashiCorp Vault, Sealed Secrets, external secrets operators"];    entity_9_5 [label="Containers"];    entity_9_6 [label="AppArmor profiles"];    entity_9_7 [label="SELinux profiles"];    entity_9_8 [label="DLP scanners"];    actor_9_1 -> entity_9_1 [label="Apply RBAC policies"];    actor_9_1 -> entity_9_2 [label="Enforce between services"];    actor_9_1 -> entity_9_3 [label="Use to filter inbound IPs and limit request rates"];    actor_9_1 -> entity_9_4 [label="Manage secrets with these tools"];    actor_9_1 -> entity_9_5 [label="Perform static and dynamic scans of"];    actor_9_1 -> entity_9_6 [label="Enforce on nodes to restrict privileged operations"];    actor_9_1 -> entity_9_7 [label="Enforce on nodes to restrict privileged operations"];    actor_9_1 -> entity_9_8 [label="Implement for preventing data exfiltration"]; }
subgraph cluster_10 { label="Validate the AI System";        actor_10_1 [label="You"];        entity_10_1 [label="Locust"];    entity_10_10 [label="Artillery"];    entity_10_11 [label="k6"];    entity_10_10 [label="Autoscaling logic"];    entity_10_11 [label="Observability data"];    entity_10_10 [label="Authentication and authorization flows"];    entity_10_11 [label="End-to-end trace analysis tools"];    entity_10_10 [label="Test datasets"];    entity_10_11 [label="Live sampling tools"];    entity_10_10 [label="Deployment manifests"];    entity_10_11 [label="Monitored rollout policy"];    actor_10_1 -> entity_10_1 [label="Use these tools to simulate user demand and reveal performance boundaries."];    actor_10_1 -> entity_10_10 [label="Use these tools to simulate user demand and reveal performance boundaries."];    actor_10_1 -> entity_10_11 [label="Use these tools to simulate user demand and reveal performance boundaries."];    actor_10_1 -> entity_10_10 [label="Verify that autoscaling triggers correctly and reflects real-time conditions in observability data."];    actor_10_1 -> entity_10_11 [label="Confirm that it accurately reflects system performance under load."];    actor_10_1 -> entity_10_10 [label="Re-test these flows under load to ensure robustness during high-demand scenarios."];    actor_10_1 -> entity_10_11 [label="Conduct analyses to identify any bottlenecks across the inference path, ensuring smooth data processing."];    actor_10_1 -> entity_10_10 [label="Validate outputs against these datasets or tools to ensure correctness of results."];    actor_10_1 -> entity_10_11 [label="Validate outputs against these datasets or tools to ensure correctness of results."];    actor_10_1 -> entity_10_10 [label="Revise and re-execute deployment if critical issues like misconfigurations or failed routing are identified during validation."];    actor_10_1 -> entity_10_11 [label="Mark the system production-ready and release it under this policy upon successful validation."]; }

actor_1_1 -> actor_2_1 [label="if Cloud deployment is chosen", ltail=cluster_1, lhead=cluster_2];
actor_1_1 -> actor_3_1 [label="if On-Premise deployment is chosen", ltail=cluster_1, lhead=cluster_3];
actor_2_1 -> actor_4_1 [label="after Cloud control plane setup", ltail=cluster_2, lhead=cluster_4];
actor_3_1 -> actor_4_1 [label="after Foundational setup complete", ltail=cluster_3, lhead=cluster_4];
actor_4_1 -> actor_5_1 [label="when Model Serving Platform ready", ltail=cluster_4, lhead=cluster_5];
actor_5_1 -> actor_6_1 [label="followed by Enabling ingress paths", ltail=cluster_5, lhead=cluster_6];
actor_5_1 -> actor_7_1 [label="after Model-serving containers deployed", ltail=cluster_5, lhead=cluster_7];
actor_5_1 -> actor_8_1 [label="followed by Observability tool deployment", ltail=cluster_5, lhead=cluster_8];
actor_6_1 -> actor_9_1 [label="after External exposure setup", ltail=cluster_6, lhead=cluster_9];
actor_7_1 -> actor_9_1 [label="after Output pipelines configured", ltail=cluster_7, lhead=cluster_9];
actor_8_1 -> actor_9_1 [label="after Observability components in place", ltail=cluster_8, lhead=cluster_9];
actor_9_1 -> actor_10_1 [label="once Security controls applied", ltail=cluster_9, lhead=cluster_10];
}


=================================================

digraph G {
    compound=true;
    rankdir=TB;

    subgraph cluster_1 { label="Choose Infrastructure (Cloud or On-Prem)";        actor_1_1 [label="You"];        entity_1_1 [label="Cloud Deployment"];    entity_1_2 [label="On-Premise Deployment"];        actor_1_1 -> entity_1_1 [label="Choose infrastructure by evaluating the operational paradigm"];    actor_1_1 -> entity_1_2 [label="Choose infrastructure by evaluating the operational paradigm"]; }
subgraph cluster_2 { label="Provision Cloud Infrastructure";        actor_2_1 [label="You"];        entity_2_1 [label="GPU-accelerated instances"];    entity_2_2 [label="Managed Kubernetes services (EKS, AKS, GKE)"];    entity_2_3 [label="IAM roles"];    entity_2_4 [label="Virtual networks"];    entity_2_5 [label="Storage classes"];    entity_2_6 [label="Terraform or Pulumi"];    entity_2_7 [label="Telemetry agents, centralized logging, secrets management integrations"];    actor_2_1 -> entity_2_1 [label="Provision"];    actor_2_1 -> entity_2_2 [label="Deploy"];    actor_2_1 -> entity_2_3 [label="Scope"];    actor_2_1 -> entity_2_4 [label="Segment"];    actor_2_1 -> entity_2_5 [label="Define"];    actor_2_1 -> entity_2_6 [label="Codify Infrastructure"];    actor_2_1 -> entity_2_7 [label="Configure"]; }
subgraph cluster_3 { label="Set Up Bare-Metal or VMs";  actor_3_1 [label="You"];  entity_3_1 [label="Physical servers/VMs"];  entity_3_2 [label="GPUs (e.g., NVIDIA A100, H100)"];  entity_3_3 [label="Container runtime environments (Docker, CRI-O)"];  entity_3_4 [label="Kubernetes orchestration tools (kubeadm, Rancher)"];  entity_3_5 [label="Networking components (static IP assignment, internal DNS, VLAN tagging)"];  entity_3_6 [label="High-throughput local storage (LVM, RAID)"];  entity_3_7 [label="Security measures (firewall zoning, VPN tunneling, device-level hardening)"];  actor_3_1 -> entity_3_1 [label="Provision infrastructure"];  actor_3_1 -> entity_3_2 [label="Equip infrastructure"];  actor_3_1 -> entity_3_3 [label="Install and configure"];  actor_3_1 -> entity_3_4 [label="Bootstrap orchestration"];  actor_3_1 -> entity_3_5 [label="Define networking"];  actor_3_1 -> entity_3_6 [label="Mount using strategies"];  actor_3_1 -> entity_3_7 [label="Implement security"]; }
subgraph cluster_4 { label="Select Model Serving Platform";  actor_4_1 [label="You"];  entity_4_1 [label="NVIDIA Triton Inference Server"];  entity_4_2 [label="TensorFlow Serving"];  entity_4_3 [label="TorchServe"];  entity_4_4 [label="Model Serving Platform"];  entity_4_5 [label="Container"];  entity_4_6 [label="REST or gRPC"];  entity_4_7 [label="Helm or Kustomize"];  actor_4_1 -> entity_4_1 [label="Identify"];  actor_4_1 -> entity_4_2 [label="Identify"];  actor_4_1 -> entity_4_3 [label="Identify"];  actor_4_1 -> entity_4_4 [label="Select"];  actor_4_1 -> entity_4_5 [label="Encapsulate"];  actor_4_1 -> entity_4_6 [label="Define exposure methods"];  actor_4_1 -> entity_4_7 [label="Employ to template deployments"]; }
subgraph cluster_5 { label="Deploy Inference Controller";  actor_5_1 [label="You"];  entity_5_1 [label="Model-serving containers"];  entity_5_10 [label="Orchestration fabric (Kubernetes)"];  entity_5_11 [label="Kubernetes StatefulSets"];  entity_5_10 [label="Kubernetes Deployments"];  entity_5_11 [label="ConfigMaps"];  entity_5_10 [label="Kubernetes Secrets"];  entity_5_11 [label="PersistentVolumeClaims (PVCs)"];  entity_5_10 [label="Horizontal Pod Autoscalers (HPA) or KEDA"];  entity_5_11 [label="Node selectors, tolerations, and affinity rules"];  entity_5_10 [label="GPU-enabled nodes"];  entity_5_11 [label="Readiness and liveness probes"];  actor_5_1 -> entity_5_1 [label="Deploy into the orchestration fabric using StatefulSets or Deployments"];  actor_5_1 -> entity_5_10 [label="Use for deploying model-serving containers"];  actor_5_1 -> entity_5_11 [label="Utilize if session affinity or persistence is needed"];  actor_5_1 -> entity_5_10 [label="Employ when neither session affinity nor persistence is required"];  actor_5_1 -> entity_5_11 [label="Configure for runtime parameters"];  actor_5_1 -> entity_5_10 [label="Use to handle sensitive credentials"];  actor_5_1 -> entity_5_11 [label="Attach if model files are dynamically pulled or logs are retained"];  actor_5_1 -> entity_5_10 [label="Implement to scale replicas based on system load or request frequency"];  actor_5_1 -> entity_5_11 [label="Apply to bind workloads to GPU-enabled nodes"];  actor_5_1 -> entity_5_10 [label="Target for binding workloads using node selectors, tolerations, and affinity rules"];  actor_5_1 -> entity_5_11 [label="Include for maintaining high availability"]; }
subgraph cluster_6 { label="Set Up Input Channels";  actor_6_1 [label="You"];    entity_6_1 [label="Inference service"];  entity_6_2 [label="HTTP endpoints, WebSocket streams, Message queue subscribers (Kafka, RabbitMQ)"];  entity_6_3 [label="Input schemas, Validation libraries"];  entity_6_4 [label="Authentication mechanisms (OAuth2, JWT)"];  entity_6_5 [label="API gateways or mesh ingress controllers (Istio Gateway, Envoy Proxy)"];  entity_6_6 [label="Trace and correlation IDs"];  actor_6_1 -> entity_6_1 [label="Enable ingress paths to feed real-time or batch inputs into your inference service."];  actor_6_1 -> entity_6_2 [label="Implementing mechanisms such as HTTP endpoints, WebSocket streams, or message queue subscribers using tools like Kafka or RabbitMQ."];  actor_6_1 -> entity_6_3 [label="Enforcing input schemas with validation libraries to ensure data integrity and compliance."];  actor_6_1 -> entity_6_4 [label="Implementing authentication mechanisms such as OAuth2 or JWT at entry points for secure access control."];  actor_6_1 -> entity_6_5 [label="Leveraging these tools to manage routing, retries, and rate limiting effectively."];  actor_6_1 -> entity_6_6 [label="Attaching trace and correlation IDs to each inbound request for auditability and observability."]; }
subgraph cluster_7 { label="Set Up Output & Storage Systems";        actor_7_1 [label="You"];    entity_7_1 [label="Structured outputs"];    entity_7_10 [label="Relational Databases (e.g., PostgreSQL)"];    entity_7_11 [label="Unstructured Blobs/Batch Exports"];    entity_7_10 [label="Object Stores (e.g., Amazon S3, Azure Blob)"];    entity_7_11 [label="Redis/Memcached"];    entity_7_10 [label="Encryption at Rest"];    entity_7_11 [label="TLS Across Outbound Interfaces"];    entity_7_10 [label="Streaming Outputs"];    entity_7_11 [label="Data Pipelines or Dashboards"];    entity_7_10 [label="Output Metadata"];    entity_7_11 [label="Data Catalogs"];    actor_7_1 -> entity_7_1 [label="Configure output pipelines to persist prediction results or forward them downstream"];        entity_7_1 -> entity_7_10 [label="Directly configured to direct structured outputs to relational databases like PostgreSQL, ensuring proper persistence and management of data"];        entity_7_10 -> entity_7_10 [label="Ensures that all output data stored in these databases is encrypted at rest for security compliance"];        entity_7_11 -> entity_7_10 [label="Configured to direct unstructured blobs or batch exports to object storage solutions, facilitating large-scale data management and accessibility"];        entity_7_10 -> entity_7_10 [label="Also require encryption at rest for all stored data, maintaining security protocols across different storage types"];        actor_7_1 -> entity_7_11 [label="Used specifically for caching responses that do not need long-term storage, improving system efficiency and response times"];        entity_7_10 -> entity_7_10 [label="A critical security measure applied across all output data stored in any form to protect against unauthorized access"];    entity_7_10 -> entity_7_10 [label="A critical security measure applied across all output data stored in any form to protect against unauthorized access"];        actor_7_1 -> entity_7_11 [label="Ensures that all outbound data transmissions from the system are secured using TLS encryption, protecting data integrity and confidentiality during transit"];        actor_7_1 -> entity_7_10 [label="Often requires specific mechanisms like Change Data Capture (CDC) or dedicated connectors for seamless integration with real-time data pipelines or dashboards"];        entity_7_10 -> entity_7_11 [label="Receives and processes streaming outputs, enabling visualization and further analysis of prediction results in near-real time"];        actor_7_1 -> entity_7_10 [label="Integration of output metadata with data catalogs is essential for effective lineage tracking and auditing, ensuring traceability of all stored or transmitted data"];        entity_7_10 -> entity_7_11 [label="Ensuring traceability of all stored or transmitted data"]; }
subgraph cluster_8 { label="Install Metrics & Addons";  actor_8_1 [label="You"];  entity_8_1 [label="Prometheus"];  entity_8_2 [label="Grafana"];  entity_8_3 [label="Fluent Bit/Fluentd"];  entity_8_4 [label="Elasticsearch/Loki/Central SIEM platform"];  entity_8_5 [label="OpenTelemetry"];  entity_8_6 [label="Dashboards"];  actor_8_1 -> entity_8_1 [label="Configure"];  actor_8_1 -> entity_8_2 [label="Use"];  actor_8_1 -> entity_8_3 [label="Route Logs Using"];  actor_8_1 -> entity_8_4 [label="Route Logs To"];  actor_8_1 -> entity_8_5 [label="Instrument Distributed Traces With"];  actor_8_1 -> entity_8_6 [label="Define"]; }
subgraph cluster_9 { label="Configure RBAC & Security";        actor_9_1 [label="You"];        entity_9_1 [label="RBAC policies"];    entity_9_2 [label="mTLS"];    entity_9_3 [label="Ingress controllers"];    entity_9_4 [label="Secrets"];    entity_9_5 [label="Containers (Static Scans)"];    entity_9_6 [label="Containers (Dynamic Scans)"];    entity_9_7 [label="AppArmor/SELinux profiles"];    entity_9_8 [label="DLP scanners"];    actor_9_1 -> entity_9_1 [label="Apply"];    actor_9_1 -> entity_9_2 [label="Enforce"];    actor_9_1 -> entity_9_3 [label="Use"];    actor_9_1 -> entity_9_4 [label="Manage"];    actor_9_1 -> entity_9_5 [label="Perform Static Scans On"];    actor_9_1 -> entity_9_6 [label="Perform Dynamic Scans On"];    actor_9_1 -> entity_9_7 [label="Enforce"];    actor_9_1 -> entity_9_8 [label="Implement"]; }
subgraph cluster_10 { label="Validate the AI System";        actor_10_1 [label="You"];    entity_10_1 [label="AI System"];    entity_10_2 [label="Tools (Locust, Artillery, k6)"];    entity_10_3 [label="Autoscaling logic"];    entity_10_4 [label="Observability data"];    entity_10_5 [label="Authentication flows"];    entity_10_6 [label="End-to-end trace analysis"];    entity_10_7 [label="Inference path"];    entity_10_8 [label="Outputs"];    entity_10_9 [label="Deployment manifests"];    actor_10_1 -> entity_10_1 [label="Validate"];    actor_10_1 -> entity_10_2 [label="Stress Testing"];    actor_10_1 -> entity_10_3 [label="Confirm Trigger"];    actor_10_1 -> entity_10_4 [label="Verify Real-time Reflection"];    actor_10_1 -> entity_10_5 [label="Re-test under Load"];    actor_10_1 -> entity_10_6 [label="Conduct to Ensure No Bottlenecks"];    actor_10_1 -> entity_10_7 [label="Analyze for Bottlenecks"];    actor_10_1 -> entity_10_8 [label="Validate against Test Datasets or Live Sampling Tools"];    actor_10_1 -> entity_10_9 [label="Revise if Necessary and Re-execute Deployment"]; }

    actor_1_1 -> actor_2_1 [label="if: cloud deployment selected", ltail=cluster_1, lhead=cluster_2];
actor_1_1 -> actor_3_1 [label="if: on-premise approach chosen", ltail=cluster_1, lhead=cluster_3];
actor_2_1 -> actor_4_1 [label="followed by: GPU instances provisioned", ltail=cluster_2, lhead=cluster_4];
actor_3_1 -> actor_4_1 [label="followed by: bare-metal/VMs set up", ltail=cluster_3, lhead=cluster_4];
actor_4_1 -> actor_5_1 [label="triggers: inference engine selected", ltail=cluster_4, lhead=cluster_5];
actor_5_1 -> actor_6_1 [label="followed by: ingress path setup", ltail=cluster_5, lhead=cluster_6];
actor_5_1 -> actor_9_1 [label="depends on: RBAC & security configured", ltail=cluster_5, lhead=cluster_9];
actor_6_1 -> actor_7_1 [label="followed by: authentication mechanisms applied", ltail=cluster_6, lhead=cluster_7];
actor_7_1 -> actor_9_1 [label="depends on: TLS security setup", ltail=cluster_7, lhead=cluster_9];
actor_7_1 -> actor_8_1 [label="followed by: output storage config", ltail=cluster_7, lhead=cluster_8];
actor_8_1 -> actor_9_1 [label="followed by: encryption at rest ensured", ltail=cluster_8, lhead=cluster_9];
actor_8_1 -> actor_9_1 [label="followed by: observability components installed", ltail=cluster_8, lhead=cluster_9];
actor_8_1 -> actor_10_1 [label="depends on: validation of AI system", ltail=cluster_8, lhead=cluster_10];
actor_9_1 -> actor_10_1 [label="followed by: RBAC & security setup", ltail=cluster_9, lhead=cluster_10];
actor_9_1 -> actor_6_1 [label="synchronize with: ingress paths enabled", ltail=cluster_9, lhead=cluster_6];
}
