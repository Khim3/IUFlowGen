{
  "doc-36189385df5fc8bc5b135cb1d8670623": {
    "content": "This section outlines the proposed system IU-SmartCert, a blockchain\u0002based educational credential management system with a selective \ndisclosure option. Our system has 3 main groups of users: issuers, \nlearners, and relying parties. An issuer can be broadly understood to \ninclude individuals or organizations qualified to issue a credential. A\nlearner is a person who received the issued credential. A relying party\nin this paper is used to refer to a person or a company who uses and \nwants to check the validity of a credential. Figure 1 shows key \nfunctions and typical interactions among users of our system. First, \ngiven a set of credentials to issue, the issuer organizes each \ncredential into our proposed format that composes of two parts: a \nmandatory component and a list of optional components, then inputs the \nfingerprint of all credentials to IU-SmartCert. From the input \nfingerprints, the system constructs a Merkle tree and publishes the \nroot node of the tree along with the issuer identity to the public \nEthereum blockchain as a smart contract. After publishing, the issuer \nsends a digital credential and its receipt to each learner. Later when \nthe learner needs to show her/his credential to a relying party, like \nan employer, s/he can select the most relevant optional components of \nthe credential to present along with the mandatory component to the \nemployer. Finally, a relying party verifies the authenticity and the \nintegrity of a given credential by checking the received data against \nthe public key infrastructure and the Ethereum public blockchain. The \nverification process can be done independently without contacting the \nissuer, and even without using the IU-SmartCert system. Formally, our \nblockchain-based credential management system provides functions to \nR1. Define and issue credentials with a mandatory component and \noptional components for selective sharing, \nR2. Verify and validate a credential, \nR3. Select optional components of the credential to disclose, \nR4. Revoke a credential issued by the system In addition, to increase \nuser’s flexibility and initiative, the system should have the following\nquality attributes: \nR5. Ability to independently check the integrity and validity of a \ncredential \nR6. Security for credentials. In the following sections, we describe in\ndetail important procedures in the IU-SmartCert system.\n3.1 Defining a Credential Schema\nIn IU-SmartCert, issuers of credentials like universities and \ninstitutions can define their own schema and vocabularies of a \ncredential for each program. A credential in IU-SmartCert composes of \ntwo parts: – One mandatory component – and a list of optional \ncomponents A mandatory component is one that learner must disclose to \nevery replying party. This component stores all information needed to \nvalidate and evaluate a credential. For instance, in a credential of an\nundergraduate student, the mandatory component is the diploma which \ncontains the name of the university, the name of the learner, the \nissued date, and the enrollment year. The list of optional components \nis a tool for issuers to define a flexible credential data model. An \nissuer can issue credentials with different levels of granularity, \ntherefore allow learners to selectively disclose their credential on \ndemand. For instance, a university could issue a transcript of a \nstudent by issuing the score of each course separately as a list of \noptional components. This credential schema allows the student to \nchoose courses to disclose to a relying party. Conversely, if a \nuniversity does not allow students to cherry-pick courses to disclose, \nthe university issue the entire transcript as a single component of the\ncredential. Moreover, in a stricter rule that requires students to \ndisclose the transcript along with their diploma, the university can \ncombine the diploma and the transcript 3.1 Defining a Credential Schema\nIn IU-SmartCert, issuers of credentials like universities and \ninstitutions can define their own schema and vocabularies of a \ncredential for each program. A credential in IU-SmartCert composes of \ntwo parts: – One mandatory component – and a list of optional \ncomponents A mandatory component is one that learner must disclose to \nevery replying party. This component stores all information needed to \nvalidate and evaluate a credential. For instance, in a credential of an\nundergraduate student, the mandatory component is the diploma which \ncontains the name of the university, the name of the learner, the \nissued date, and the enrollment year. The list of optional components \nis a tool for issuers to define a flexible credential data model. An \nissuer can issue credentials with different levels of granularity, \ntherefore allow learners to selectively disclose their credential on \ndemand. For instance, a university could issue a transcript of a \nstudent by issuing the score of each course separately as a list of \noptional components. This credential schema allows the student to \nchoose courses to disclose to a relying party. Conversely, if a \nuniversity does not allow students to cherry-pick courses to disclose, \nthe university issue the entire transcript as a single component of the\ncredential. Moreover, in a stricter rule that requires students to \ndisclose the transcript along with their diploma, the university can \ncombine the diploma and the transcript into a single mandatory \ncomponent in the input to the IU-SmartCert. Therefore, the structure \nhelps to fulfill the requirement R1 of the system. The procedure to \ndefine a schema and vocabularies in IU-SmartCert is performed via the \ndata input of an issuer. For every credential, the issuer must provide \na list of files corresponding to each component in the credential with \nthe following naming rule CredentialID.ComponentName.(R).ext where – \nCredentialID is the identity of a credential and all components of a \ncredential will share the same value. – ComponentName is the name of a \ncomponent. – .(R) is the marker for the mandatory component. An \noptional component’s filename does not include this marker. – .ext is \nthe file extension. For instance, consider a bachelor’s credential \ncomposes of a diploma, a transcript and a scientific profile. The \nissuer could define that the diploma is a mandatory component, while \nthe transcript and the scientific profile are optional components. In \nsuch case, the input to the IU-SmartCert of a credential with \nidentifier ITIU01 is 3 pdf files named as following IUIT01.diploma.\n(R).pdf IUIT01.transcript.pdf IUIT01.profile.pdf \n3.2 Issuing Credentials\nWhen learners complete a program, the institution generates digital \ncredentials of learners and passes them to the IU-SmartCert system. The\nsystem then organizes and publishes the digital fingerprint of those \ncredentials to the Ethereum blockchain in such a way that learners can \nchoose components of their credential to disclose and a relying party \ncan validate a given credential (Fig. 2). \nConstructing Merkle Tree. To begin this procedure, we use the schema \nand the digital fingerprint of each credential to construct a Merkle \ntree [13]. We first combine the identity of the credential with the \ncontent of the component and its type, mandatory or optional, defined \nby the schema, then uses SHA-256 to calculate the hash value of the \ncombination and create a leaf node in the Merkle tree. We apply this \nprocedure to all components of all input credentials and obtain \ncorresponding leaf nodes. From those leaf nodes, we build the rest of \nthe tree by concatenating two leaf nodes, calculating a new hash value \nresulting in a parent node, and continuing up toward the root of the \nMerkle tree. We can construct a Merkle tree from any arbitrary number \nof credentials and always results in a single root node, so an \ninstitution could issue credentials in batch to save time and effort.\nPublishing Data as a Smart Contract. \nOnce the Merkle tree is built, the IU-SmartCert system publishes the \nhash value of the root node and supporting data to the Ethereum \nblockchain as a smart contract so that a relying party can validate an \nissued credential independently without contacting the issuer. The \nsmart contract (as shown in Fig. 3) consists of – institute A read-only\nvariable for the hash of the issuer name. The issuer name is the \norganization field in the issuer’s X.509 certificate, and thus binds to\nthe identity of the issuer. – MTRoot A read-only variable for the hash \nof the root of the Merkle tree. – revocationList A list of revoked \ncredentials along with a reason of the revocation. The function is \naccessible only for the issuer which is the owner of the contract. See \nSect. 3.5 for the revoking procedure. – verify(bytes32[], bytes32) A \nfunction to check whether a component belongs to the Merkle tree \nrepresented by the root node stored in MTRoot of the contract. – \nisValid(bytes32) A function to check whether a credential is revoked. \nIf the credential is revoked, the function returns false with a reason,\notherwise, returns true. – revoke(bytes32, string) A function to revoke\na credential. See Sect. 3.5 for the revoking procedure. It is worth \nnoting that the smart contract stores only the root node of the Merkle \ntree constructed from the batch of credentials, and no other data about\nthe credentials are published. When the deployment of the smart \ncontract is confirmed, the system keeps the metadata to generate \nreceipts for learners.\n3.3 Generating Receipts\nAfter publishing credentials to Ethereum network, the system generates \na receipt for each credential and sends it along with the digital \ncredential to the corresponding learner. A relying party will use it to\nverify and validate the credential. A receipt contains metadata of the \nsmart contract, a proof of existence in the Merkle tree of each \ncomponent of the credential, and the X.509 certificate of the issuer. \nThe metadata in a receipt is to help a relying party to verify the \nidentity of the issuer and the validity of the smart contract. The \nmetadata consists of the address of the smart contract that manages the\ncredential, the hash value of the transaction that deployed the smart \ncontract and the identity of the issuer. To provide a verifiable \nidentity, we use a hybrid approach [6] where we establish a binding \nbetween accounts in Ethereum and an X.509 public key certificate of the\nissuer. This X.509 certificate is issued by a trusted certificate \nauthority (CA) of the traditional public key infrastructure (PKI), \nwhich comprises of hardware and software for creating, managing, \ndistributing, using and revoking public keys. At registration time, CA \nverifies the identity of the issuer and writes its information into the\nX.509 certificate; then, CA digitally signs this certificate with its \nprivate key [1]. Therefore, originality of digital credentials in this \nsystem is guaranteed. Before using our system IU-SmartCert, the issuer \nneeds to endorse the Ethereum account used to publish credentials by \nsigning the respective address with the private key of the X.509 \ncertificate. Then, the issuer input to the system the address of its \nEthereum account, the signature, and its X.509 certificate chain. \nLater, replying parties like employers can retrieve from the receipt \nthe information to verify them versus their trusted certificate \nauthority, thereby authenticating the identity of the issuer and the \nvalidity of the smart contract. In a receipt, the proof of existence of\na component is extracted from the Merkle tree build in the issuing \nphase. Since each component corresponds to a leaf node of the tree, its\nproof of existence is a list of nodes in the Merkle tree required to \nrecalculate the path from the corresponding leaf node to the root node \n[13]. In an example in Fig. 4, the proof of existence of component 3 is\nthe hash value Hash 4 and the hash value Hash 12. From these proofs, \none can calculate the path from component 3 to the root node.\nFinally, the system generates one receipt for each credential as a file\nin JSON data format (as shown in Fig. 5) with the following fields: – \nissuedOn: the time when the credential was published to the blockchain \n– transactionHash: the hash value of the transaction that deployed the \nsmart contract that manages the credential – contractAddress: the \naddress of the smart contract that manages the credential – \ncredentialID: the identity of the credential – components: the data to \nprove the authenticity of the credential. For each component of the \ncredential, the data includes • name: the name of the component • \nmandatory: a boolean value indicating whether the component is \nmandatory or not • proof: the proof of existence of the component in \nthe Merkle tree • hash: a hash value of the concatenation of the \ncredential’s identity, the type, and the content of the component. – \nissuer: the verifiable identity of the issuer • ethereumAccount: the \nEthereum account of the issuer • ethereumAccountSignature: the \nsignature of the issuer’s Ethereum account endorsed by the private key \nof the X.509 certificate • IssuerCertificateChain: the chain of the \nX.509 certificates of the issuer in PEM format\n3.4 Exchanging Credentials\nIn our proposed system, learners can exchange their credentials with a \nselective disclosure option. In other words, learners can choose \ncomponents to share, and also can choose components not to share while \nfollowing the schema defined by issuers (Requirement R3). The \nexchanging credentials begin when an employer requests the learner to \npresent his credential. First, the learner takes his credential and \npicks the most relevant components to share. This selection is possible\nbecause credentials in our system are organized into two parts a \nmandatory component and a list of optional components. And since the \ntype of each component is defined by the issuer, the learner can freely\npick and skip some optional components without invalidating the \ncredential. After the selection, the learner needs to generate a new \nreceipt which is the proof of existence for those selected components. \nHe can upload his original credential’s receipt to the IU-SmartCert \nsystem, select the chosen components, and download a new receipt. On \nthe other hand, the learner can make the new receipt on his own without\nusing the system. He can open his receipt in a text editor, remove the \nsections corresponding to the components that are not chosen, and save \nthe file as a new receipt. For example, in Fig. 5 there are two valid \nreceipts of one credential. The receipt on the left is used when the \nlearner would like to show all of the three components of his \ncredential. The receipt in the right is used when the learner chooses \nnot to share the ScienceProfile component. Finally, the learner sends \nthe new receipt and related files to the employer. \n3.5 Revoking Credentials\nLike other credential management systems, the IU-SmartCert allows \nissuers to revoke issued credentials (Requirement R4). While in IU\u0002SmartCert learners can select components to present to relying parties,\nthey always have to present the mandatory component of the credential \notherwise the credential is invalid. With that structure, issuers to \nrevoke an issued credential by marking its mandatory component as \nrevoked. In detail, we store in the smart contract that manages the \nissued credentials a list of revoked components along with the reason \nfor their revocation. And only the owner of the smart contract, i.e. \nthe issuer of the credential, can add a record to that revocation list.\nLater, any relying party can check the status of a credential by \nchecking its mandatory component against the revocation list. In Fig. 3\nthe data and the functions for the revocation are the revocationList, \nthe revoke, and the isValid functions. \n3.6 Verifying a Credential\nAn employer or any relying party can verify a credential issued by IU\u0002SmartCert from the files, the receipt and the Ethereum network without \ncontacting the issuing institution. The credential verifying process \nincludes the following steps: \n1. Check the receipt information and the issuer’s information – The \nissuer’s X.509 certificate – The signature of the Ethereum account used\nto issue the credential. – Validity of the owner of the smart contract \non Ethereum. – The name of the issuer in the smart contract and the \nname on the X.509 certificate.\n2. Check the integrity of all components of the credential. This step \nchecks the number, the type and the hash value of the files against the\nvalue stored on the receipt.\n3. Check the validity of the components in the certificate. This step \nchecks the hash value and proofs to confirm whether the credential \nbelongs to the merkle tree whose root node is published on the Ethereum\nblockchain.\n4. Check whether the certificate is revoked. This step checks if the \nmandatory component of the credential in the list of revoked \ncredentials stored in the smart contract on the Ethereum blockchain. \nThe above procedure is implemented in IU-SmartCert with a progress bar \nfor each step as shown in Fig. 6. On the other hand, relying parties \ncan perform the verifying procedure on their own. Once received a \ncredential and its receipt, a relying party can extract all the data to\nverify a credential without the involvement of the issuer. Then with a \nconnection to the Ethereum blockchain and any publicly available tools \nto verify a digital signature and a X.509 certificate, the relying \nparty can finish the verification procedure. That helps us fulfill the \nrequirements R2 and R5."
  }
}